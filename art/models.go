// Package art contains structs that represent an atomic red team technique file.
package art

// Technique represents a atomic red team yaml technique file. Each technique
// can contain multiple atomic tests which test a particular ttp.
type Technique struct {
	ID          string  `yaml:"attack_technique"`
	DisplayName string  `yaml:"display_name"`
	AtomicTests []*Test `yaml:"atomic_tests"`
	Path        string  `yaml:"-"`
}

// A Test represents an atomic red team test for a specific technique.
type Test struct {
	TechniqueID            string `yaml:"-"` // ignore field
	Name                   string
	AutoGeneratedGUID      string `yaml:"auto_generated_guid"`
	Description            string
	SupportedPlatforms     []string            `yaml:"supported_platforms"`
	InputArguments         map[string]Argument `yaml:"input_arguments"`
	DependencyExecutorName string              `yaml:"dependency_executor_name"`
	Dependencies           []Dependency        `yaml:"dependencies"`
	Executor               Executor
}

// An Argument represents input arguments needed by an atomic test command or dependency.
type Argument struct {
	Description string
	Type        string
	Default     string
}

// An Executor describes how an atomic test will be run and what it will do.
type Executor struct {
	Name              string
	ElevationRequired bool `yaml:"elevation_required"`
	Command           string
	CleanupCommand    string `yaml:"cleanup_command"`
	Steps             string
}

// A Dependency represents a dependency of an atomic test. An atomic test might require
// certain prerequisites to be satisfied before the test can be run.
type Dependency struct {
	Description      string
	PrereqCommand    string `yaml:"prereq_command"`
	GetPrereqCommand string `yaml:"get_prereq_command"`
}
